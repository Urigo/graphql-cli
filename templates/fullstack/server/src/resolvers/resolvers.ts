/*
 * File generated by Graphback CRUD resolver plugin.
 * Content will be overwritten by Graphback generator.
 * To change implementation please disable generator options and supply your own implementation
 * outside generated file.
 */

export default {
  Note: {
    comments: (parent, args, context) => {
      return context.Comment.batchLoadData("noteId", parent.id, context)
    }
  },

  Comment: {
    note: (parent, args, context) => {
      return context.Note.findBy({ id: parent.noteId }).then(
        results => results[0]
      )
    }
  },

  Query: {
    findNotes: (parent, args, context) => {
      const { fields, ...page } = args
      return context.Note.findBy(fields, page)
    },
    findAllNotes: (parent, args, context) => {
      return context.Note.findAll(args)
    },
    findComments: (parent, args, context) => {
      const { fields, ...page } = args
      return context.Comment.findBy(fields, page)
    },
    findAllComments: (parent, args, context) => {
      return context.Comment.findAll(args)
    }
  },

  Mutation: {
    createNote: (parent, args, context) => {
      return context.Note.create(args.input, context)
    },
    updateNote: (parent, args, context) => {
      return context.Note.update(args.input, context)
    },
    deleteNote: (parent, args, context) => {
      return context.Note.delete(args.input, context)
    },
    createComment: (parent, args, context) => {
      return context.Comment.create(args.input, context)
    },
    updateComment: (parent, args, context) => {
      return context.Comment.update(args.input, context)
    },
    deleteComment: (parent, args, context) => {
      return context.Comment.delete(args.input, context)
    }
  },

  Subscription: {
    newNote: {
      subscribe: (parent, args, context) => {
        return context.Note.subscribeToCreate(args, context)
      }
    },
    updatedNote: {
      subscribe: (parent, args, context) => {
        return context.Note.subscribeToUpdate(args, context)
      }
    },
    deletedNote: {
      subscribe: (parent, args, context) => {
        return context.Note.subscribeToDelete(args, context)
      }
    },
    newComment: {
      subscribe: (parent, args, context) => {
        return context.Comment.subscribeToCreate(args, context)
      }
    },
    updatedComment: {
      subscribe: (parent, args, context) => {
        return context.Comment.subscribeToUpdate(args, context)
      }
    },
    deletedComment: {
      subscribe: (parent, args, context) => {
        return context.Comment.subscribeToDelete(args, context)
      }
    }
  }
}
